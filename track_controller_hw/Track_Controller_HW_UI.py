# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Track_Controller_HW_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import serial
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5 import uic
from PyQt5.QtCore import *

from PlanesOverTrains.track_controller_hw.Track_Controller_UI_Testbench import Ui_Test_Bench
from PlanesOverTrains.track_controller_hw.track_controller_hw import Track_Controller_HW

QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
import sys


class Ui_track_controller_mainwindow(object):

    def __init__(self, track_controller_hw: Track_Controller_HW):
        super().__init__()
        self.track_controller_hw = track_controller_hw
        self._ard = serial.Serial(port='COM5', baudrate=9600, timeout=.1)
        self.ui = Ui_Test_Bench(self.track_controller_hw)

    def open_window(self):
        self.window = QtWidgets.QMainWindow()
        # self.ui = Ui_TrainModel_MainUI()
       # self.ui = Ui_Test_Bench(self.track_controller_hw)  # Pass the TrainModel instance to the new UI
        self.ui.setupUi(self.window)
        self.window.show()

    def get_ard(self):
        return self._ard

    def setupUi(self, track_controller_mainwindow_ui):
        track_controller_mainwindow_ui.setObjectName("track_controller_mainwindow")
        track_controller_mainwindow_ui.resize(727, 538)
        self.centralwidget = QtWidgets.QWidget(track_controller_mainwindow_ui)
        self.centralwidget.setObjectName("centralwidget")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(0, 0, 711, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setAutoFillBackground(False)
        self.title_label.setStyleSheet("background-color: rgb(255, 255, 0);\n"
                                       "border: 3px solid black;")
        self.title_label.setObjectName("title_label")
        self.system_speed_spnbx = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.system_speed_spnbx.setGeometry(QtCore.QRect(634, 14, 62, 22))
        self.system_speed_spnbx.setObjectName("system_speed_spnbx")
        self.system_speed_label = QtWidgets.QLabel(self.centralwidget)
        self.system_speed_label.setGeometry(QtCore.QRect(498, 10, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.system_speed_label.setFont(font)
        self.system_speed_label.setAutoFillBackground(False)
        self.system_speed_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                              "border: 1px solid black;")
        self.system_speed_label.setObjectName("system_speed_label")
        self.manual_mode_check = QtWidgets.QCheckBox(self.centralwidget)
        self.manual_mode_check.setEnabled(True)
        self.manual_mode_check.setGeometry(QtCore.QRect(210, 62, 14, 15))
        self.manual_mode_check.setObjectName("manual_mode_check")
        self.ebrake_fail_on = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_on.setEnabled(True)
        self.ebrake_fail_on.setGeometry(QtCore.QRect(176, 60, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_on.setFont(font)
        self.ebrake_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                                          "background-color: rgb(0, 170, 0);")
        self.ebrake_fail_on.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_fail_on.setObjectName("ebrake_fail_on")
        self.manual_mode_label = QtWidgets.QLabel(self.centralwidget)
        self.manual_mode_label.setGeometry(QtCore.QRect(8, 56, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.manual_mode_label.setFont(font)
        self.manual_mode_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                             "border: 1px solid black;\n"
                                             "")
        self.manual_mode_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.manual_mode_label.setObjectName("manual_mode_label")
        self.manual_mode_off = QtWidgets.QLabel(self.centralwidget)
        self.manual_mode_off.setEnabled(True)
        self.manual_mode_off.setGeometry(QtCore.QRect(150, 60, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.manual_mode_off.setFont(font)
        self.manual_mode_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                                           "background-color: rgb(170, 0, 0);")
        self.manual_mode_off.setAlignment(QtCore.Qt.AlignCenter)
        self.manual_mode_off.setObjectName("manual_mode_off")
        self.select_output = QtWidgets.QListWidget(self.centralwidget)
        self.select_output.setGeometry(QtCore.QRect(260, 200, 231, 231))
        self.select_output.setObjectName("select_output")
        item = QtWidgets.QListWidgetItem()
        self.select_output.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.select_output.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.select_output.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.select_output.addItem(item)
        self.wayside_select = QtWidgets.QComboBox(self.centralwidget)
        self.wayside_select.setGeometry(QtCore.QRect(260, 130, 231, 25))
        self.wayside_select.setEditable(True)
        self.wayside_select.setObjectName("wayside_select")
        self.wayside_select.addItem("")
        self.wayside_select.addItem("")
        self.manual_mode_on = QtWidgets.QLabel(self.centralwidget)
        self.manual_mode_on.setEnabled(True)
        self.manual_mode_on.setGeometry(QtCore.QRect(180, 60, 25, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.manual_mode_on.setFont(font)
        self.manual_mode_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                                          "background-color: rgb(0, 170, 0);")
        self.manual_mode_on.setAlignment(QtCore.Qt.AlignCenter)
        self.manual_mode_on.setObjectName("manual_mode_on")
        self.load_plc_label = QtWidgets.QLabel(self.centralwidget)
        self.load_plc_label.setGeometry(QtCore.QRect(500, 60, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.load_plc_label.setFont(font)
        self.load_plc_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "border: 1px solid black;\n"
                                          "")
        self.load_plc_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.load_plc_label.setObjectName("load_plc_label")
        self.selected_output = QtWidgets.QLineEdit(self.centralwidget)
        self.selected_output.setGeometry(QtCore.QRect(260, 490, 211, 25))
        self.selected_output.setText("")
        self.selected_output.setObjectName("selected_output")
        self.show_ard = QtWidgets.QPushButton(self.centralwidget)
        self.show_ard.setGeometry(QtCore.QRect(500, 490, 93, 28))
        self.show_ard.setObjectName("show_ard")
        self.show_ard.setText("Output")
        self.plc_output = QtWidgets.QTextBrowser(self.centralwidget)
        self.plc_output.setGeometry(QtCore.QRect(520, 190, 191, 261))
        self.plc_output.setObjectName("plc_output")
        self.plc_output_label = QtWidgets.QLabel(self.centralwidget)
        self.plc_output_label.setGeometry(QtCore.QRect(520, 150, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.plc_output_label.setFont(font)
        self.plc_output_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                            "border: 1px solid black;\n"
                                            "")
        self.plc_output_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.plc_output_label.setObjectName("plc_output_label")
        self.load_plc_button = QtWidgets.QPushButton(self.centralwidget)
        self.load_plc_button.setGeometry(QtCore.QRect(600, 60, 93, 28))
        self.load_plc_button.setObjectName("load_plc_button")
        self.Select_wayside_label = QtWidgets.QLabel(self.centralwidget)
        self.Select_wayside_label.setGeometry(QtCore.QRect(260, 100, 231, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Select_wayside_label.setFont(font)
        self.Select_wayside_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                                "border: 1px solid black;\n"
                                                "")
        self.Select_wayside_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.Select_wayside_label.setObjectName("Select_wayside_label")
        self.select_output_label = QtWidgets.QLabel(self.centralwidget)
        self.select_output_label.setGeometry(QtCore.QRect(260, 170, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.select_output_label.setFont(font)
        self.select_output_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                               "border: 1px solid black;\n"
                                               "")
        self.select_output_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.select_output_label.setObjectName("select_output_label")
        self.selected_output_label = QtWidgets.QLabel(self.centralwidget)
        self.selected_output_label.setGeometry(QtCore.QRect(260, 460, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.selected_output_label.setFont(font)
        self.selected_output_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                                 "border: 1px solid black;\n"
                                                 "")
        self.selected_output_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.selected_output_label.setObjectName("selected_output_label")
        self.occupancy_display = QtWidgets.QListWidget(self.centralwidget)
        self.occupancy_display.setGeometry(QtCore.QRect(10, 200, 231, 231))
        self.occupancy_display.setObjectName("occupancy_display")
        self.occupancy_label = QtWidgets.QLabel(self.centralwidget)
        self.occupancy_label.setGeometry(QtCore.QRect(10, 170, 221, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.occupancy_label.setFont(font)
        self.occupancy_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                           "border: 1px solid black;\n"
                                           "")
        self.occupancy_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.occupancy_label.setObjectName("occupancy_label")
        self.testbench_button = QtWidgets.QPushButton(self.centralwidget)
        self.testbench_button.setGeometry(QtCore.QRect(10, 480, 81, 31))
        self.testbench_button.setObjectName("testbench_button")
        self.title_label.raise_()
        self.system_speed_label.raise_()
        self.system_speed_spnbx.raise_()
        self.manual_mode_check.raise_()
        self.ebrake_fail_on.raise_()
        self.manual_mode_label.raise_()
        self.manual_mode_off.raise_()
        self.select_output.raise_()
        self.wayside_select.raise_()
        self.manual_mode_on.raise_()
        self.load_plc_label.raise_()
        self.selected_output.raise_()
        self.plc_output.raise_()
        self.plc_output_label.raise_()
        self.load_plc_button.raise_()
        self.Select_wayside_label.raise_()
        self.select_output_label.raise_()
        self.selected_output_label.raise_()
        self.occupancy_display.raise_()
        self.occupancy_label.raise_()
        self.testbench_button.raise_()
        track_controller_mainwindow_ui.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(track_controller_mainwindow_ui)
        self.statusbar.setObjectName("statusbar")
        track_controller_mainwindow_ui.setStatusBar(self.statusbar)

        self.retranslateUi(track_controller_mainwindow_ui)
        QtCore.QMetaObject.connectSlotsByName(track_controller_mainwindow_ui)

        self.select_output.clear()
        self._handler()

        for x in self.track_controller_hw.get_switch_list():
            self.select_output.addItem(x)

        for x in self.track_controller_hw.get_light_list():
            self.select_output.addItem(x)

        for i in self.track_controller_hw.get_blue_track():
            if self.track_controller_hw.get_occupancy(i) == 1:
                item = str(i) + " " + str(self.track_controller_hw.get_speed_limit(i)) + " mi/hr"
                self.occupancy_display.addItem(item)

        self.select_output.addItem("Commanded Speed")


    def update(self):
        _translate = QtCore.QCoreApplication.translate

        self.system_speed_label.setVisible(False)
        self.system_speed_spnbx.setVisible(False)

        self.load_plc_button.setVisible(not bool(self.manual_mode_check.checkState()))
        # label visibility
        self.manual_mode_off.setVisible(not bool(self.manual_mode_check.checkState()))
        self.manual_mode_on.setVisible(bool(self.manual_mode_check.checkState()))

        self.CheckIfSelected()



    def CheckIfSelected(self):
        send = ""
        try:
            value = self.select_output.currentItem().text()
            self.selected_output.setText(value)
            self.show_ard.setCheckable(True)
            if self.show_ard.isChecked():
                type_output = value.split(" ")
                if type_output[0] == "Light":
                    print("Light")
                    send = "1001" + str(self.track_controller_hw.get_lights(value)) + str(type_output[1])
                    self.get_ard().write(send.encode('utf-8'))
                elif type_output[0] == "Switch":
                    print("Switch")
                    if self.track_controller_hw.get_switch(value) == 0:
                        send = "10100" + str(type_output[1]) + " => Left"
                        self.get_ard().write(send.encode('utf-8'))
                    elif self.track_controller_hw.get_switch(value) == 1:
                        send = "10100" + str(type_output[1]) + " => Right"
                        self.get_ard().write(send.encode('utf-8'))
                elif type_output[0] == "Commanded":
                    print("Commanded")
                    self.track_controller_hw.set_commanded_speed(
                        self.track_controller_hw.get_authority() - self.track_controller_hw.get_suggested_speed())
                    com = self.track_controller_hw.get_commanded_speed()
                    send = "11000" + str(com)
                    self.get_ard().write(send.encode('utf-8'))
            self.show_ard.setChecked(False)
        except:
            print("No Value Selected")

    def _handler(self):
        self.timer = QTimer()
        self.timer.setInterval(100)  # refreshes every time period
        self.timer.timeout.connect(self.update)
        self.timer.start()

    def retranslateUi(self, track_controller_mainwindow):
        _translate = QtCore.QCoreApplication.translate
        track_controller_mainwindow.setWindowTitle(_translate("track_controller_mainwindow", "MainWindow"))
        self.title_label.setText(_translate("track_controller_mainwindow", "Wayside Controller - Hardware"))
        self.system_speed_label.setText(_translate("track_controller_mainwindow", " System Speed"))
        self.manual_mode_check.setText(_translate("track_controller_mainwindow", "Manual Mode"))
        self.ebrake_fail_on.setText(_translate("track_controller_mainwindow", "ON"))
        self.manual_mode_label.setText(_translate("track_controller_mainwindow", "Manual Mode"))
        self.manual_mode_off.setText(_translate("track_controller_mainwindow", "OFF"))
        __sortingEnabled = self.select_output.isSortingEnabled()
        self.select_output.setSortingEnabled(False)
        item = self.select_output.item(0)
        item.setText(_translate("track_controller_mainwindow", "Light B-C11"))
        item = self.select_output.item(1)
        item.setText(_translate("track_controller_mainwindow", "Light  B-A5"))
        item = self.select_output.item(2)
        item.setText(_translate("track_controller_mainwindow", "Light B-B6"))
        item = self.select_output.item(3)
        item.setText(_translate("track_controller_mainwindow", "Switch B -A5/B6/C11"))
        self.select_output.setSortingEnabled(__sortingEnabled)
        self.wayside_select.setItemText(0, _translate("track_controller_mainwindow", "Blue 1"))
        self.wayside_select.setItemText(1, _translate("track_controller_mainwindow", "Blue 2"))
        self.manual_mode_on.setText(_translate("track_controller_mainwindow", "ON"))
        self.load_plc_label.setText(_translate("track_controller_mainwindow", "PLC BLUE"))
        self.plc_output_label.setText(_translate("track_controller_mainwindow", "PLC Output"))
        self.load_plc_button.setText(_translate("track_controller_mainwindow", "Load PLC"))
        self.Select_wayside_label.setText(_translate("track_controller_mainwindow", "Select Waysde Controller"))
        self.select_output_label.setText(_translate("track_controller_mainwindow", "Select Output"))
        self.selected_output_label.setText(_translate("track_controller_mainwindow", "Selected Output"))
        self.occupancy_label.setText(_translate("track_controller_mainwindow", "Blocks Occupied- Limit"))
        self.testbench_button.setText(_translate("track_controller_mainwindow", "Testbench"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    track_controller_mainwindow = QtWidgets.QMainWindow()
    track_controller_hw = Track_Controller_HW()
    ui = Ui_track_controller_mainwindow(track_controller_hw)
    ui.setupUi(track_controller_mainwindow)
    track_controller_mainwindow.show()
    sys.exit(app.exec_())
