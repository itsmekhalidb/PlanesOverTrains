# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Train_Model_Test_Bench_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
# from PyQt5 import uic
from PyQt5.QtWidgets import *
from train_model import TrainModel
from Train_Model_UI import Ui_TrainModel_MainUI
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
import time

class Ui_TrainModel_TestBench(object):

        def __init__(self, train_model: TrainModel):
            super().__init__()
            self.train_model = train_model
        def open_window(self):
                self.window = QtWidgets.QMainWindow()
                # self.ui = Ui_TrainModel_MainUI()
                self.ui = Ui_TrainModel_MainUI(self.train_model)  # Pass the TrainModel instance to the new UI
                self.ui.setupUi(self.window)
                self.window.show()
        def setupUi(self, TrainModel_TestBench):
                TrainModel_TestBench.setObjectName("TrainModel_TestBench")
                TrainModel_TestBench.resize(679, 690)
                self.Test_Bench = QtWidgets.QWidget(TrainModel_TestBench)
                self.Test_Bench.setObjectName("Test_Bench")
                # self.system_speed_spnbx = QtWidgets.QDoubleSpinBox(self.Test_Bench)
                # self.system_speed_spnbx.setGeometry(QtCore.QRect(602, 12, 62, 22))
                # self.system_speed_spnbx.setObjectName("system_speed_spnbx")
                self.engine_fail_off = QtWidgets.QLabel(self.Test_Bench)
                self.engine_fail_off.setGeometry(QtCore.QRect(598, 300, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.engine_fail_off.setFont(font)
                self.engine_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.engine_fail_off.setAlignment(QtCore.Qt.AlignCenter)
                self.engine_fail_off.setObjectName("engine_fail_off")
                self.external_lights_off = QtWidgets.QLabel(self.Test_Bench)
                self.external_lights_off.setEnabled(True)
                self.external_lights_off.setGeometry(QtCore.QRect(598, 488, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.external_lights_off.setFont(font)
                self.external_lights_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.external_lights_off.setAlignment(QtCore.Qt.AlignCenter)
                self.external_lights_off.setObjectName("external_lights_off")
                self.ebrake_on = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_on.setEnabled(True)
                self.ebrake_on.setGeometry(QtCore.QRect(624, 514, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_on.setFont(font)
                self.ebrake_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.ebrake_on.setAlignment(QtCore.Qt.AlignCenter)
                self.ebrake_on.setObjectName("ebrake_on")
                self.next_station_infobox = QtWidgets.QTableWidget(self.Test_Bench)
                self.next_station_infobox.setGeometry(QtCore.QRect(10, 366, 435, 73))
                self.next_station_infobox.setColumnCount(4)
                self.next_station_infobox.setRowCount(3)
                new_row_height = 5  # Adjust the row height as needed
                for row in range(self.next_station_infobox.rowCount()):
                        self.next_station_infobox.verticalHeader().resizeSection(row, new_row_height)
                self.next_station_infobox.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.next_station_infobox.setFont(font)
                self.next_station_infobox.horizontalHeader().setVisible(False)
                self.next_station_infobox.verticalHeader().setVisible(False)
                self.next_station_infobox.verticalScrollBar().setVisible(False)
                self.next_station_infobox.resizeRowsToContents()
                self.next_station_infobox.setObjectName("next_station_table")
                self.brake_fail_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.brake_fail_chkbx.setGeometry(QtCore.QRect(658, 328, 14, 15))
                self.brake_fail_chkbx.setText("")
                self.brake_fail_chkbx.setObjectName("brake_fail_chkbx")
                self.brake_fail_on = QtWidgets.QLabel(self.Test_Bench)
                self.brake_fail_on.setEnabled(True)
                self.brake_fail_on.setGeometry(QtCore.QRect(624, 328, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.brake_fail_on.setFont(font)
                self.brake_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.brake_fail_on.setAlignment(QtCore.Qt.AlignCenter)
                self.brake_fail_on.setObjectName("brake_fail_on")
                self.vcmd_info_label = QtWidgets.QLabel(self.Test_Bench)
                self.vcmd_info_label.setGeometry(QtCore.QRect(10, 206, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.vcmd_info_label.setFont(font)
                self.vcmd_info_label.setStyleSheet("background-color: rgb(202, 202, 202);\n"
                "border: 1px solid black;\n"
                "")
                self.vcmd_info_label.setAlignment(QtCore.Qt.AlignCenter)
                self.vcmd_info_label.setObjectName("vcmd_info_label")
                self.left_door_label = QtWidgets.QLabel(self.Test_Bench)
                self.left_door_label.setGeometry(QtCore.QRect(456, 432, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.left_door_label.setFont(font)
                self.left_door_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.left_door_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.left_door_label.setObjectName("left_door_label")
                self.ebrake_fail_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.ebrake_fail_chkbx.setGeometry(QtCore.QRect(658, 276, 14, 15))
                self.ebrake_fail_chkbx.setText("")
                self.ebrake_fail_chkbx.setObjectName("ebrake_fail_chkbx")
                self.internal_lights_on = QtWidgets.QLabel(self.Test_Bench)
                self.internal_lights_on.setEnabled(True)
                self.internal_lights_on.setGeometry(QtCore.QRect(624, 462, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.internal_lights_on.setFont(font)
                self.internal_lights_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.internal_lights_on.setAlignment(QtCore.Qt.AlignCenter)
                self.internal_lights_on.setObjectName("internal_lights_on")
                self.engine_fail_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.engine_fail_chkbx.setGeometry(QtCore.QRect(658, 302, 14, 15))
                self.engine_fail_chkbx.setText("")
                self.engine_fail_chkbx.setObjectName("engine_fail_chkbx")
                self.signal_fail_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.signal_fail_chkbx.setGeometry(QtCore.QRect(658, 354, 14, 15))
                self.signal_fail_chkbx.setText("")
                self.signal_fail_chkbx.setObjectName("signal_fail_chkbx")
                self.left_door_closed = QtWidgets.QLabel(self.Test_Bench)
                self.left_door_closed.setEnabled(True)
                self.left_door_closed.setGeometry(QtCore.QRect(544, 436, 53, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.left_door_closed.setFont(font)
                self.left_door_closed.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.left_door_closed.setAlignment(QtCore.Qt.AlignCenter)
                self.left_door_closed.setObjectName("left_door_closed")
                self.signal_fail_on = QtWidgets.QLabel(self.Test_Bench)
                self.signal_fail_on.setEnabled(True)
                self.signal_fail_on.setGeometry(QtCore.QRect(624, 352, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.signal_fail_on.setFont(font)
                self.signal_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.signal_fail_on.setAlignment(QtCore.Qt.AlignCenter)
                self.signal_fail_on.setObjectName("signal_fail_on")
                self.force_info_label = QtWidgets.QLabel(self.Test_Bench)
                self.force_info_label.setGeometry(QtCore.QRect(10, 92, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.force_info_label.setFont(font)
                self.force_info_label.setStyleSheet("background-color: rgb(202, 202, 202);\n"
                "border: 1px solid black;\n"
                "")
                self.force_info_label.setAlignment(QtCore.Qt.AlignCenter)
                self.force_info_label.setObjectName("force_info_label")
                self.accel_info_label = QtWidgets.QLabel(self.Test_Bench)
                self.accel_info_label.setGeometry(QtCore.QRect(10, 286, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.accel_info_label.setFont(font)
                self.accel_info_label.setStyleSheet("background-color: rgb(202, 202, 202);\n"
                "border: 1px solid black;\n"
                "")
                self.accel_info_label.setAlignment(QtCore.Qt.AlignCenter)
                self.accel_info_label.setObjectName("accel_info_label")
                self.internal_lights_label = QtWidgets.QLabel(self.Test_Bench)
                self.internal_lights_label.setGeometry(QtCore.QRect(456, 458, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.internal_lights_label.setFont(font)
                self.internal_lights_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.internal_lights_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.internal_lights_label.setObjectName("internal_lights_label")
                self.engine_fail_on = QtWidgets.QLabel(self.Test_Bench)
                self.engine_fail_on.setEnabled(True)
                self.engine_fail_on.setGeometry(QtCore.QRect(624, 300, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.engine_fail_on.setFont(font)
                self.engine_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.engine_fail_on.setAlignment(QtCore.Qt.AlignCenter)
                self.engine_fail_on.setObjectName("engine_fail_on")
                # self.system_speed_label = QtWidgets.QLabel(self.Test_Bench)
                # self.system_speed_label.setGeometry(QtCore.QRect(500, 8, 169, 31))
                # font = QtGui.QFont()
                # font.setPointSize(10)
                # font.setBold(True)
                # font.setWeight(75)
                # self.system_speed_label.setFont(font)
                # self.system_speed_label.setAutoFillBackground(False)
                # self.system_speed_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                # "border: 1px solid black;")
                # self.system_speed_label.setObjectName("system_speed_label")
                self.right_door_closed = QtWidgets.QLabel(self.Test_Bench)
                self.right_door_closed.setEnabled(True)
                self.right_door_closed.setGeometry(QtCore.QRect(544, 410, 53, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.right_door_closed.setFont(font)
                self.right_door_closed.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.right_door_closed.setAlignment(QtCore.Qt.AlignCenter)
                self.right_door_closed.setObjectName("right_door_closed")
                self.right_door_open = QtWidgets.QLabel(self.Test_Bench)
                self.right_door_open.setEnabled(True)
                self.right_door_open.setGeometry(QtCore.QRect(598, 410, 49, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.right_door_open.setFont(font)
                self.right_door_open.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.right_door_open.setAlignment(QtCore.Qt.AlignCenter)
                self.right_door_open.setObjectName("right_door_open")
                self.temperature_spnbx = QtWidgets.QSpinBox(self.Test_Bench)
                self.temperature_spnbx.setGeometry(QtCore.QRect(608, 214, 42, 22))
                self.temperature_spnbx.setObjectName("temperature_spnbx")
                self.ebrake_label = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_label.setGeometry(QtCore.QRect(456, 510, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_label.setFont(font)
                self.ebrake_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.ebrake_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.ebrake_label.setObjectName("ebrake_label")
                self.brake_fail_off = QtWidgets.QLabel(self.Test_Bench)
                self.brake_fail_off.setGeometry(QtCore.QRect(598, 328, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.brake_fail_off.setFont(font)
                self.brake_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.brake_fail_off.setAlignment(QtCore.Qt.AlignCenter)
                self.brake_fail_off.setObjectName("brake_fail_off")
                self.ebrake_fail_label = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_fail_label.setGeometry(QtCore.QRect(456, 270, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_fail_label.setFont(font)
                self.ebrake_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.ebrake_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.ebrake_fail_label.setObjectName("ebrake_fail_label")
                self.brake_fail_label = QtWidgets.QLabel(self.Test_Bench)
                self.brake_fail_label.setGeometry(QtCore.QRect(456, 322, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.brake_fail_label.setFont(font)
                self.brake_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.brake_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.brake_fail_label.setObjectName("brake_fail_label")
                self.mass_label = QtWidgets.QLabel(self.Test_Bench)
                self.mass_label.setGeometry(QtCore.QRect(456, 160, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.mass_label.setFont(font)
                self.mass_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.mass_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.mass_label.setObjectName("mass_label")
                self.ebrake_fail_on = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_fail_on.setEnabled(True)
                self.ebrake_fail_on.setGeometry(QtCore.QRect(624, 274, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_fail_on.setFont(font)
                self.ebrake_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.ebrake_fail_on.setAlignment(QtCore.Qt.AlignCenter)
                self.ebrake_fail_on.setObjectName("ebrake_fail_on")
                self.left_door_open = QtWidgets.QLabel(self.Test_Bench)
                self.left_door_open.setEnabled(True)
                self.left_door_open.setGeometry(QtCore.QRect(598, 436, 49, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.left_door_open.setFont(font)
                self.left_door_open.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.left_door_open.setAlignment(QtCore.Qt.AlignCenter)
                self.left_door_open.setObjectName("left_door_open")
                self.ebrake_fail_off = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_fail_off.setEnabled(True)
                self.ebrake_fail_off.setGeometry(QtCore.QRect(598, 274, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_fail_off.setFont(font)
                self.ebrake_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.ebrake_fail_off.setAlignment(QtCore.Qt.AlignCenter)
                self.ebrake_fail_off.setObjectName("ebrake_fail_off")
                self.title_label = QtWidgets.QLabel(self.Test_Bench)
                self.title_label.setGeometry(QtCore.QRect(0, 0, 679, 51))
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.title_label.setFont(font)
                self.title_label.setAutoFillBackground(False)
                self.title_label.setStyleSheet("background-color: rgb(255, 255, 0);\n"
                "border: 3px solid black;")
                self.title_label.setObjectName("title_label")
                self.velocity_label = QtWidgets.QLabel(self.Test_Bench)
                self.velocity_label.setGeometry(QtCore.QRect(10, 138, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.velocity_label.setFont(font)
                self.velocity_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.velocity_label.setAlignment(QtCore.Qt.AlignCenter)
                self.velocity_label.setObjectName("velocity_label")
                self.right_door_label = QtWidgets.QLabel(self.Test_Bench)
                self.right_door_label.setGeometry(QtCore.QRect(456, 406, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.right_door_label.setFont(font)
                self.right_door_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.right_door_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.right_door_label.setObjectName("right_door_label")
                self.width_label = QtWidgets.QLabel(self.Test_Bench)
                self.width_label.setGeometry(QtCore.QRect(456, 108, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.width_label.setFont(font)
                self.width_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.width_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.width_label.setObjectName("width_label")
                self.acceleration_label = QtWidgets.QLabel(self.Test_Bench)
                self.acceleration_label.setGeometry(QtCore.QRect(10, 252, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.acceleration_label.setFont(font)
                self.acceleration_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.acceleration_label.setAlignment(QtCore.Qt.AlignCenter)
                self.acceleration_label.setObjectName("acceleration_label")
                self.passenger_label = QtWidgets.QLabel(self.Test_Bench)
                self.passenger_label.setGeometry(QtCore.QRect(456, 186, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.passenger_label.setFont(font)
                self.passenger_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.passenger_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.passenger_label.setObjectName("passenger_label")
                self.length_label = QtWidgets.QLabel(self.Test_Bench)
                self.length_label.setGeometry(QtCore.QRect(456, 82, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.length_label.setFont(font)
                self.length_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.length_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.length_label.setObjectName("length_label")
                self.height_label = QtWidgets.QLabel(self.Test_Bench)
                self.height_label.setGeometry(QtCore.QRect(456, 134, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.height_label.setFont(font)
                self.height_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.height_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.height_label.setObjectName("height_label")
                self.train_info_label = QtWidgets.QLabel(self.Test_Bench)
                self.train_info_label.setGeometry(QtCore.QRect(456, 56, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.train_info_label.setFont(font)
                self.train_info_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.train_info_label.setAlignment(QtCore.Qt.AlignCenter)
                self.train_info_label.setObjectName("train_info_label")
                self.vacc_info_label = QtWidgets.QLabel(self.Test_Bench)
                self.vacc_info_label.setGeometry(QtCore.QRect(10, 172, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(14)
                font.setBold(True)
                font.setWeight(75)
                self.vacc_info_label.setFont(font)
                self.vacc_info_label.setStyleSheet("background-color: rgb(202, 202, 202);\n"
                "border: 1px solid black;\n"
                "")
                self.vacc_info_label.setAlignment(QtCore.Qt.AlignCenter)
                self.vacc_info_label.setObjectName("vacc_info_label")
                self.force_label = QtWidgets.QLabel(self.Test_Bench)
                self.force_label.setGeometry(QtCore.QRect(10, 58, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.force_label.setFont(font)
                self.force_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.force_label.setAlignment(QtCore.Qt.AlignCenter)
                self.force_label.setObjectName("force_label")
                self.next_station_label = QtWidgets.QLabel(self.Test_Bench)
                self.next_station_label.setGeometry(QtCore.QRect(10, 332, 435, 35))
                font = QtGui.QFont()
                font.setPointSize(16)
                font.setBold(True)
                font.setWeight(75)
                self.next_station_label.setFont(font)
                self.next_station_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.next_station_label.setAlignment(QtCore.Qt.AlignCenter)
                self.next_station_label.setObjectName("next_station_label")
                # self.sys_time_label = QtWidgets.QLabel(self.Test_Bench)
                # self.sys_time_label.setGeometry(QtCore.QRect(404, 8, 83, 31))
                # font = QtGui.QFont()
                # font.setPointSize(12)
                # font.setBold(True)
                # font.setWeight(75)
                # self.sys_time_label.setFont(font)
                # self.sys_time_label.setStyleSheet("border: 1px solid black;\n"
                # "background-color: rgb(255, 255, 255);")
                # self.sys_time_label.setObjectName("sys_time_label")
                self.test_bench_btn = QtWidgets.QPushButton(self.Test_Bench, clicked=lambda: self.open_window())
                self.test_bench_btn.setGeometry(QtCore.QRect(292, 10, 101, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.test_bench_btn.setFont(font)
                self.test_bench_btn.setObjectName("test_bench_btn")
                self.calc_btn = QtWidgets.QPushButton(self.Test_Bench, clicked=lambda: self.calculate())
                self.calc_btn.setGeometry(QtCore.QRect(562, 580, 101, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.calc_btn.setFont(font)
                self.calc_btn.setObjectName("calc_btn")
                self.signal_fail_label = QtWidgets.QLabel(self.Test_Bench)
                self.signal_fail_label.setGeometry(QtCore.QRect(456, 348, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.signal_fail_label.setFont(font)
                self.signal_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.signal_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.signal_fail_label.setObjectName("signal_fail_label")
                self.external_lights_label = QtWidgets.QLabel(self.Test_Bench)
                self.external_lights_label.setGeometry(QtCore.QRect(456, 484, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.external_lights_label.setFont(font)
                self.external_lights_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.external_lights_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.external_lights_label.setObjectName("external_lights_label")
                self.external_lights_on = QtWidgets.QLabel(self.Test_Bench)
                self.external_lights_on.setEnabled(True)
                self.external_lights_on.setGeometry(QtCore.QRect(624, 488, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.external_lights_on.setFont(font)
                self.external_lights_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.external_lights_on.setAlignment(QtCore.Qt.AlignCenter)
                self.external_lights_on.setObjectName("external_lights_on")
                self.ebrake_off = QtWidgets.QLabel(self.Test_Bench)
                self.ebrake_off.setEnabled(True)
                self.ebrake_off.setGeometry(QtCore.QRect(598, 514, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.ebrake_off.setFont(font)
                self.ebrake_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.ebrake_off.setAlignment(QtCore.Qt.AlignCenter)
                self.ebrake_off.setObjectName("ebrake_off")
                self.signal_fail_off = QtWidgets.QLabel(self.Test_Bench)
                self.signal_fail_off.setGeometry(QtCore.QRect(598, 352, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.signal_fail_off.setFont(font)
                self.signal_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.signal_fail_off.setAlignment(QtCore.Qt.AlignCenter)
                self.signal_fail_off.setObjectName("signal_fail_off")
                self.engine_fail_label = QtWidgets.QLabel(self.Test_Bench)
                self.engine_fail_label.setGeometry(QtCore.QRect(456, 296, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.engine_fail_label.setFont(font)
                self.engine_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.engine_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.engine_fail_label.setObjectName("engine_fail_label")
                self.temperature_label = QtWidgets.QLabel(self.Test_Bench)
                self.temperature_label.setGeometry(QtCore.QRect(456, 212, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.temperature_label.setFont(font)
                self.temperature_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.temperature_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.temperature_label.setObjectName("temperature_label")
                self.controls_label = QtWidgets.QLabel(self.Test_Bench)
                self.controls_label.setGeometry(QtCore.QRect(456, 380, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.controls_label.setFont(font)
                self.controls_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.controls_label.setAlignment(QtCore.Qt.AlignCenter)
                self.controls_label.setObjectName("controls_label")
                self.failure_mode_label = QtWidgets.QLabel(self.Test_Bench)
                self.failure_mode_label.setGeometry(QtCore.QRect(456, 244, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.failure_mode_label.setFont(font)
                self.failure_mode_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
                "border: 2px solid black;\n"
                "")
                self.failure_mode_label.setAlignment(QtCore.Qt.AlignCenter)
                self.failure_mode_label.setObjectName("failure_mode_label")
                self.ad_view1 = QtWidgets.QGraphicsView(self.Test_Bench)
                self.ad_view1.setGeometry(QtCore.QRect(10, 444, 435, 119))
                self.ad_view1.setObjectName("ad_view1")
                self.internal_lights_off = QtWidgets.QLabel(self.Test_Bench)
                self.internal_lights_off.setEnabled(True)
                self.internal_lights_off.setGeometry(QtCore.QRect(598, 462, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.internal_lights_off.setFont(font)
                self.internal_lights_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.internal_lights_off.setAlignment(QtCore.Qt.AlignCenter)
                self.internal_lights_off.setObjectName("internal_lights_off")
                self.external_lights_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.external_lights_chkbx.setGeometry(QtCore.QRect(658, 490, 14, 15))
                self.external_lights_chkbx.setText("")
                self.external_lights_chkbx.setObjectName("external_lights_chkbx")
                self.right_door_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.right_door_chkbx.setGeometry(QtCore.QRect(658, 412, 14, 15))
                self.right_door_chkbx.setText("")
                self.right_door_chkbx.setObjectName("right_door_chkbx")
                self.left_door_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.left_door_chkbx.setGeometry(QtCore.QRect(658, 438, 14, 15))
                self.left_door_chkbx.setText("")
                self.left_door_chkbx.setObjectName("left_door_chkbx")
                self.internal_lights_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.internal_lights_chkbx.setGeometry(QtCore.QRect(658, 464, 14, 15))
                self.internal_lights_chkbx.setText("")
                self.internal_lights_chkbx.setObjectName("internal_lights_chkbx")
                self.ebrake_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.ebrake_chkbx.setGeometry(QtCore.QRect(658, 516, 14, 15))
                self.ebrake_chkbx.setText("")
                self.ebrake_chkbx.setObjectName("ebrake_chkbx")
                self.service_brake_on = QtWidgets.QLabel(self.Test_Bench)
                self.service_brake_on.setEnabled(True)
                self.service_brake_on.setGeometry(QtCore.QRect(624, 540, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.service_brake_on.setFont(font)
                self.service_brake_on.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(0, 170, 0);")
                self.service_brake_on.setAlignment(QtCore.Qt.AlignCenter)
                self.service_brake_on.setObjectName("service_brake_on")
                self.service_brake_off = QtWidgets.QLabel(self.Test_Bench)
                self.service_brake_off.setEnabled(True)
                self.service_brake_off.setGeometry(QtCore.QRect(598, 540, 25, 17))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.service_brake_off.setFont(font)
                self.service_brake_off.setStyleSheet("color: rgb(255, 255, 255);\n"
                "background-color: rgb(170, 0, 0);")
                self.service_brake_off.setAlignment(QtCore.Qt.AlignCenter)
                self.service_brake_off.setObjectName("service_brake_off")
                self.service_brake_label = QtWidgets.QLabel(self.Test_Bench)
                self.service_brake_label.setGeometry(QtCore.QRect(456, 536, 198, 27))
                font = QtGui.QFont()
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.service_brake_label.setFont(font)
                self.service_brake_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "border: 1px solid black;\n"
                "")
                self.service_brake_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                self.service_brake_label.setObjectName("service_brake_label")
                self.service_brake_chkbx = QtWidgets.QCheckBox(self.Test_Bench)
                self.service_brake_chkbx.setGeometry(QtCore.QRect(658, 542, 14, 15))
                self.service_brake_chkbx.setText("")
                self.service_brake_chkbx.setObjectName("service_brake_chkbx")
                self.line = QtWidgets.QFrame(self.Test_Bench)
                self.line.setGeometry(QtCore.QRect(6, 566, 667, 4))
                self.line.setStyleSheet("color: rgb(0, 0, 0);\n"
                "background-color: rgb(0, 0, 0);\n"
                "border: 1px solid black;\n"
                "")
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setObjectName("line")
                self.authority_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.authority_edit.setGeometry(QtCore.QRect(88, 580, 65, 31))
                self.authority_edit.setObjectName("authority_edit")
                self.train_line_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.train_line_edit.setGeometry(QtCore.QRect(88, 614, 65, 31))
                self.train_line_edit.setObjectName("train_line_edit")
                self.authority_label = QtWidgets.QLabel(self.Test_Bench)
                self.authority_label.setGeometry(QtCore.QRect(18, 588, 65, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.authority_label.setFont(font)
                self.authority_label.setAlignment(QtCore.Qt.AlignCenter)
                self.authority_label.setObjectName("authority_label")
                self.train_line_label = QtWidgets.QLabel(self.Test_Bench)
                self.train_line_label.setGeometry(QtCore.QRect(16, 618, 65, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.train_line_label.setFont(font)
                self.train_line_label.setAlignment(QtCore.Qt.AlignCenter)
                self.train_line_label.setObjectName("train_line_label")
                self.speed_limit_label = QtWidgets.QLabel(self.Test_Bench)
                self.speed_limit_label.setGeometry(QtCore.QRect(194, 590, 79, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.speed_limit_label.setFont(font)
                self.speed_limit_label.setObjectName("speed_limit_label")
                self.underground_label = QtWidgets.QLabel(self.Test_Bench)
                self.underground_label.setGeometry(QtCore.QRect(186, 620, 87, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.underground_label.setFont(font)
                self.underground_label.setObjectName("underground_label")
                self.speed_limit_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.speed_limit_edit.setGeometry(QtCore.QRect(270, 582, 65, 31))
                self.speed_limit_edit.setObjectName("speed_limit_edit")
                self.underground_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.underground_edit.setGeometry(QtCore.QRect(270, 616, 65, 31))
                self.underground_edit.setObjectName("underground_edit")
                self.cmd_pwr_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.cmd_pwr_edit.setGeometry(QtCore.QRect(456, 582, 65, 31))
                self.cmd_pwr_edit.setObjectName("cmd_pwr_edit")
                self.cmd_pwr_label = QtWidgets.QLabel(self.Test_Bench)
                self.cmd_pwr_label.setGeometry(QtCore.QRect(376, 578, 81, 39))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.cmd_pwr_label.setFont(font)
                self.cmd_pwr_label.setAlignment(QtCore.Qt.AlignCenter)
                self.cmd_pwr_label.setWordWrap(True)
                self.cmd_pwr_label.setObjectName("cmd_pwr_label")
                self.grade_label = QtWidgets.QLabel(self.Test_Bench)
                self.grade_label.setGeometry(QtCore.QRect(16, 654, 65, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.grade_label.setFont(font)
                self.grade_label.setAlignment(QtCore.Qt.AlignCenter)
                self.grade_label.setObjectName("grade_label")
                self.elevation_label = QtWidgets.QLabel(self.Test_Bench)
                self.elevation_label.setGeometry(QtCore.QRect(204, 654, 65, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.elevation_label.setFont(font)
                self.elevation_label.setObjectName("elevation_label")
                self.occupancy_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.occupancy_edit.setGeometry(QtCore.QRect(456, 616, 65, 31))
                self.occupancy_edit.setObjectName("occupancy_edit")
                self.vcmd_label = QtWidgets.QLabel(self.Test_Bench)
                self.vcmd_label.setGeometry(QtCore.QRect(378, 650, 79, 29))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.vcmd_label.setFont(font)
                self.vcmd_label.setAlignment(QtCore.Qt.AlignCenter)
                self.vcmd_label.setWordWrap(True)
                self.vcmd_label.setObjectName("vcmd_label")
                self.elevation_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.elevation_edit.setGeometry(QtCore.QRect(270, 650, 65, 31))
                self.elevation_edit.setObjectName("elevation_edit")
                self.occupancy_label = QtWidgets.QLabel(self.Test_Bench)
                self.occupancy_label.setGeometry(QtCore.QRect(372, 620, 87, 19))
                font = QtGui.QFont()
                font.setPointSize(9)
                font.setBold(True)
                font.setWeight(75)
                self.occupancy_label.setFont(font)
                self.occupancy_label.setObjectName("occupancy_label")
                self.grade_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.grade_edit.setGeometry(QtCore.QRect(88, 648, 65, 31))
                self.grade_edit.setObjectName("grade_edit")
                self.vcmd_edit = QtWidgets.QTextEdit(self.Test_Bench)
                self.vcmd_edit.setGeometry(QtCore.QRect(456, 650, 65, 31))
                self.vcmd_edit.setObjectName("vcmd_edit")
                self.passenger_spnbx = QtWidgets.QSpinBox(self.Test_Bench)
                self.passenger_spnbx.setGeometry(QtCore.QRect(608, 188, 42, 22))
                self.passenger_spnbx.setObjectName("passenger_spnbx")
                self.ebrake_fail_label.raise_()
                self.engine_fail_label.raise_()
                self.temperature_label.raise_()
                self.service_brake_label.raise_()
                self.external_lights_label.raise_()
                self.left_door_label.raise_()
                self.right_door_label.raise_()
                self.left_door_closed.raise_()
                self.signal_fail_label.raise_()
                self.internal_lights_label.raise_()
                self.ebrake_fail_on.raise_()
                self.ebrake_fail_on.hide() # default ebrake is off
                self.vacc_info_label.raise_()
                self.left_door_open.raise_()
                self.left_door_open.hide() # default left door is closed
                self.engine_fail_off.raise_()
                self.temperature_spnbx.raise_()
                self.signal_fail_chkbx.raise_()
                self.velocity_label.raise_()
                self.internal_lights_off.raise_()
                self.ebrake_label.raise_()
                self.force_label.raise_()
                self.brake_fail_chkbx.raise_()
                self.vcmd_info_label.raise_()
                self.brake_fail_label.raise_()
                self.passenger_label.raise_()
                self.signal_fail_off.raise_()
                self.accel_info_label.raise_()
                self.signal_fail_on.raise_()
                self.signal_fail_on.hide() # default signal is on
                self.title_label.raise_()
                self.internal_lights_on.raise_()
                self.internal_lights_on.hide() # default internal lights is off
                self.external_lights_on.raise_()
                self.external_lights_on.hide() # default external lights is off
                self.ebrake_fail_off.raise_()
                self.height_label.raise_()
                self.right_door_open.raise_()
                self.right_door_open.hide() # default right door is closed
                self.next_station_label.raise_()
                self.engine_fail_chkbx.raise_()
                self.ebrake_fail_chkbx.raise_()
                # self.sys_time_label.raise_()
                self.force_info_label.raise_()
                self.acceleration_label.raise_()
                self.ebrake_on.raise_()
                self.ebrake_on.hide() # default ebrake is off
                self.length_label.raise_()
                self.brake_fail_on.raise_()
                self.brake_fail_on.hide() # default brake is off
                self.engine_fail_on.raise_()
                self.engine_fail_on.hide() # default engine is not failed
                self.controls_label.raise_()
                self.mass_label.raise_()
                self.ebrake_off.raise_()
                self.brake_fail_off.raise_()
                self.next_station_infobox.raise_()
                self.failure_mode_label.raise_()
                self.right_door_closed.raise_()
                self.external_lights_off.raise_()
                self.width_label.raise_()
                self.test_bench_btn.raise_()
                self.calc_btn.raise_()
                self.train_info_label.raise_()
                self.ad_view1.raise_()
                # self.system_speed_label.raise_()
                # self.system_speed_spnbx.raise_()
                self.external_lights_chkbx.raise_()
                self.right_door_chkbx.raise_()
                self.left_door_chkbx.raise_()
                self.internal_lights_chkbx.raise_()
                self.ebrake_chkbx.raise_()
                self.service_brake_on.raise_()
                self.service_brake_on.hide() # default service brake is off
                self.service_brake_off.raise_()
                self.service_brake_chkbx.raise_()
                self.line.raise_()
                self.authority_edit.raise_()
                self.train_line_edit.raise_()
                self.authority_label.raise_()
                self.train_line_label.raise_()
                self.speed_limit_label.raise_()
                self.underground_label.raise_()
                self.speed_limit_edit.raise_()
                self.underground_edit.raise_()
                self.cmd_pwr_edit.raise_()
                self.cmd_pwr_label.raise_()
                self.grade_label.raise_()
                self.elevation_label.raise_()
                self.occupancy_edit.raise_()
                self.vcmd_label.raise_()
                self.elevation_edit.raise_()
                self.occupancy_label.raise_()
                self.grade_edit.raise_()
                self.vcmd_edit.raise_()
                self.passenger_spnbx.raise_()
                TrainModel_TestBench.setCentralWidget(self.Test_Bench)

                self.retranslateUi(TrainModel_TestBench)
                QtCore.QMetaObject.connectSlotsByName(TrainModel_TestBench)

                self._handler()  # start the timer

                # Set Default Values for Text Boxes
                # Acceleration
                self.accel_info_label.setText(str(self.train_model.get_acceleration()) + " m/s^2")

                # Velocity
                self.vacc_info_label.setText(str("Vacc = " + str(self.train_model.get_actual_velocity()) + " m/s"))

                # Force
                self.force_info_label.setText(str(self.train_model.get_force()) + " N")

                # Authority
                self.authority_edit.setText(str(self.train_model.get_authority()))

                # Train Line
                self.train_line_edit.setText(str(self.train_model.get_line()))

                # Speed Limit
                self.speed_limit_edit.setText(str(self.train_model.get_speed_limit()))

                # Underground
                self.underground_edit.setText(str(self.train_model.get_underground()))

                # Grade
                self.grade_edit.setText(str(self.train_model.get_grade()))

                # Elevation
                self.elevation_edit.setText(str(self.train_model.get_elevation()))

                # Occupancy
                self.occupancy_edit.setText(str(self.train_model.get_block()))

                # Title
                self.title_label.setText(str(self.train_model.get_line() + " Line"))

                # Power
                self.cmd_pwr_edit.setText(str(self.train_model.get_cmd_power()))

                # Mass
                self.mass_label.setText(str("Mass: " + str(self.train_model.get_total_mass()) + " kg"))

                # Commanded Velocity
                self.vcmd_info_label.setText(str("CMD Speed: " + str(self.train_model.get_cmd_speed()) + " m/s"))
                self.vcmd_edit.setText(str(self.train_model.get_cmd_speed()))

                # Passenger Count
                self.passenger_spnbx.setValue(self.train_model.get_curr_passenger_count())

                # Set Default Values for Check Boxes
                # Failure Modes
                self.ebrake_fail_chkbx.toggled.connect(
                        lambda: self.train_model.set_ebrake_failure(self.ebrake_fail_chkbx.isChecked()))
                self.engine_fail_chkbx.toggled.connect(
                        lambda: self.train_model.set_engine_failure(self.engine_fail_chkbx.isChecked()))
                self.brake_fail_chkbx.toggled.connect(
                        lambda: self.train_model.set_sbrake_failure(self.brake_fail_chkbx.isChecked()))
                self.signal_fail_chkbx.toggled.connect(
                        lambda: self.train_model.set_signal_failure(self.signal_fail_chkbx.isChecked()))
                # Controls
                self.right_door_chkbx.toggled.connect(
                        lambda: self.train_model.set_right_door(self.right_door_chkbx.isChecked()))
                self.left_door_chkbx.toggled.connect(
                        lambda: self.train_model.set_left_door(self.left_door_chkbx.isChecked()))
                self.internal_lights_chkbx.toggled.connect(
                        lambda: self.train_model.set_int_lights(self.internal_lights_chkbx.isChecked()))
                self.external_lights_chkbx.toggled.connect(
                        lambda: self.train_model.set_ext_lights(self.external_lights_chkbx.isChecked()))
                self.ebrake_chkbx.toggled.connect(
                        lambda: self.train_model.set_emergency_brake(self.ebrake_chkbx.isChecked()))
                self.service_brake_chkbx.toggled.connect(
                        lambda: self.train_model.set_service_brake(self.service_brake_chkbx.isChecked()))

        def _handler(self):
                self.timer = QTimer()
                self.timer.setInterval(100)  # 100ms update rate
                self.timer.timeout.connect(self.update)
                self.timer.start()

        def update(self):
                _translate = QtCore.QCoreApplication.translate

                # Acceleration
                self.accel_info_label.setText(str(round(self.train_model.get_acceleration(), 3)) + " m/s²")

                # Velocity
                self.vacc_info_label.setText(str("Vacc = " + str(round(self.train_model.get_actual_velocity(),3)) + " m/s"))

                # Force
                self.force_info_label.setText(str(round(self.train_model.get_force(), 3)) + " N")

                # Authority
                self.authority_edit.setText(str(self.train_model.get_authority()))

                # Speed Limit
                self.speed_limit_edit.setText(str(self.train_model.get_speed_limit()))

                # Underground
                self.underground_edit.setText(str(self.train_model.get_underground()))

                # Grade
                self.grade_edit.setText(str(self.train_model.get_grade()))

                # Elevation
                self.elevation_edit.setText(str(self.train_model.get_elevation()))

                # Occupancy
                self.occupancy_edit.setText(str(self.train_model.get_block()))

                # Title
                self.title_label.setText(str(self.train_model.get_line() + " Line"))

                # Mass
                self.mass_label.setText(str("Mass: " + str(round(self.train_model.get_total_mass(), 3)) + " kg"))

                # Temperature
                self.temperature_label.setText(str("Car Temp.: " + str(round(self.train_model.get_temperature(),0)) + "°F"))

                # Commanded Velocity
                self.vcmd_info_label.setText(str("CMD Speed: " + str(self.train_model.get_cmd_speed()) + " m/s"))

                # Next Station Info
                # Row 1
                self.next_station_infobox.setItem(0, 0, QtWidgets.QTableWidgetItem("Next Station:"))
                self.next_station_infobox.setItem(0, 1, QtWidgets.QTableWidgetItem(str(self.train_model.get_beacon())))
                self.next_station_infobox.setItem(0, 2, QtWidgets.QTableWidgetItem("Authority:"))
                self.next_station_infobox.setItem(0, 3, QtWidgets.QTableWidgetItem(str(self.train_model.get_authority())))
                # Row 2
                self.next_station_infobox.setItem(1, 0, QtWidgets.QTableWidgetItem("Speed Limit:"))
                self.next_station_infobox.setItem(1, 1, QtWidgets.QTableWidgetItem(str(self.train_model.get_speed_limit())))
                self.next_station_infobox.setItem(1, 2, QtWidgets.QTableWidgetItem("Underground:"))
                self.next_station_infobox.setItem(1, 3, QtWidgets.QTableWidgetItem(str(self.train_model.get_underground())))
                # Row 3
                self.next_station_infobox.setItem(2, 0, QtWidgets.QTableWidgetItem("Grade:"))
                self.next_station_infobox.setItem(2, 1, QtWidgets.QTableWidgetItem(str(self.train_model.get_grade())))
                self.next_station_infobox.setItem(2, 2, QtWidgets.QTableWidgetItem("Elevation:"))
                self.next_station_infobox.setItem(2, 3, QtWidgets.QTableWidgetItem(str(self.train_model.get_elevation())))

                # Failure Modes
                # Emergency Brake Failure
                self.ebrake_fail_on.setVisible(bool(self.train_model.get_ebrake_failure()))
                self.ebrake_fail_off.setVisible(not bool(self.train_model.get_ebrake_failure()))

                # Engine Failure
                self.engine_fail_on.setVisible(bool(self.train_model.get_engine_failure()))
                self.engine_fail_off.setVisible(not bool(self.train_model.get_engine_failure()))

                # Service Brake Failure
                self.brake_fail_on.setVisible(bool(self.train_model.get_sbrake_failure()))
                self.brake_fail_off.setVisible(not bool(self.train_model.get_sbrake_failure()))

                # Signal Failure
                self.signal_fail_on.setVisible(bool(self.train_model.get_signal_failure()))
                self.signal_fail_off.setVisible(not bool(self.train_model.get_signal_failure()))

                # Controls
                # Right Door
                self.right_door_open.setVisible(bool(self.train_model.get_right_door()))
                self.right_door_closed.setVisible(not bool(self.train_model.get_right_door()))

                # Left Door
                self.left_door_open.setVisible(bool(self.train_model.get_left_door()))
                self.left_door_closed.setVisible(not bool(self.train_model.get_left_door()))

                # Internal Lights
                # if self.train_model.get_underground(): self.train_model.set_int_lights(True)
                # else: self.train_model.set_int_lights(False)
                self.internal_lights_on.setVisible(bool(self.train_model.get_int_lights()))
                self.internal_lights_off.setVisible(not bool(self.train_model.get_int_lights()))

                # External Lights
                # if self.train_model.get_underground(): self.train_model.set_ext_lights(True)
                # else: self.train_model.set_ext_lights(False)
                self.external_lights_on.setVisible(bool(self.train_model.get_ext_lights()))
                self.external_lights_off.setVisible(not bool(self.train_model.get_ext_lights()))

                # E-Brake
                self.ebrake_on.setVisible(bool(self.train_model.get_emergency_brake()))
                self.ebrake_off.setVisible(not bool(self.train_model.get_emergency_brake()))

                # Service Brake
                self.service_brake_on.setVisible(bool(self.train_model.get_service_brake()))
                self.service_brake_off.setVisible(not bool(self.train_model.get_service_brake()))

                # Force Calculation
                self.train_model.calc_force()

                # Acceleration Calculation
                self.train_model.calc_acceleration()

                # Velocity Calculation
                self.train_model.calc_actual_velocity()

                # update the temperature on from Main UI
                self.temperature_spnbx.setValue(int(self.train_model.get_temperature()))
                # temp = self.temperature_spnbx.value()
                # self.train_model.set_temperature(float(temp))

        def calculate(self):
                # read input from text box in the test UI and send it to the train model

                # update the cmd power
                powerCmd = self.cmd_pwr_edit.toPlainText()
                # send the commanded power to the train model
                self.train_model.set_cmd_power(float(powerCmd))

                # update the passenger count and mass
                pass_count = self.passenger_spnbx.value()
                # send the passenger count to the train model
                self.train_model.set_curr_passenger_count(int(pass_count))
                self.train_model.set_passenger_mass(int(pass_count))

                # update the train mass
                self.train_model.set_total_mass()

                # update the cmd speed
                speedCmd = self.vcmd_edit.toPlainText()
                self.train_model.set_cmd_speed(float(speedCmd))

                # title
                line = self.train_line_edit.toPlainText()
                self.train_model.set_line(str(line))

                # simulate
                self.train_model.beacon_simulate()

        def retranslateUi(self, TrainModel_TestBench):
                _translate = QtCore.QCoreApplication.translate
                TrainModel_TestBench.setWindowTitle(_translate("TrainModel_TestBench", "Train Model Test Bench"))
                self.engine_fail_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.external_lights_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.ebrake_on.setText(_translate("TrainModel_TestBench", "ON"))
                # self.next_station_infobox.setHtml(_translate("TrainModel_TestBench", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                # "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                # "p, li { white-space: pre-wrap; }\n"
                # "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:12pt; font-weight:600; font-style:normal;\">\n"
                # "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">You are arriving at DORMONT STATION in 59 minutes.</span></p></body></html>"))
                self.brake_fail_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.vcmd_info_label.setText(_translate("TrainModel_TestBench", "Vcmd = 100 m/s"))
                self.left_door_label.setText(_translate("TrainModel_TestBench", "Left Door"))
                self.internal_lights_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.left_door_closed.setText(_translate("TrainModel_TestBench", "CLOSED"))
                self.signal_fail_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.force_info_label.setText(_translate("TrainModel_TestBench", "F = P/Vcmd"))
                self.accel_info_label.setText(_translate("TrainModel_TestBench", "a = F/M"))
                self.internal_lights_label.setText(_translate("TrainModel_TestBench", "Internal Lights"))
                self.engine_fail_on.setText(_translate("TrainModel_TestBench", "ON"))
                # self.system_speed_label.setText(_translate("TrainModel_TestBench", " System Speed"))
                self.right_door_closed.setText(_translate("TrainModel_TestBench", "CLOSED"))
                self.right_door_open.setText(_translate("TrainModel_TestBench", "OPEN"))
                self.ebrake_label.setText(_translate("TrainModel_TestBench", "E-Brake"))
                self.brake_fail_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.ebrake_fail_label.setText(_translate("TrainModel_TestBench", "E-Brake Failure"))
                self.brake_fail_label.setText(_translate("TrainModel_TestBench", "Service Brake Failure"))
                self.mass_label.setText(_translate("TrainModel_TestBench", "Mass: 40900 Kg"))
                self.ebrake_fail_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.left_door_open.setText(_translate("TrainModel_TestBench", "OPEN"))
                self.ebrake_fail_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.title_label.setText(_translate("TrainModel_TestBench", " Train #NUM Line COLOR"))
                self.velocity_label.setText(_translate("TrainModel_TestBench", "Actual & Commanded Velocity (m/s)"))
                self.right_door_label.setText(_translate("TrainModel_TestBench", "Right Door"))
                self.width_label.setText(_translate("TrainModel_TestBench", "Width: 8.7 ft"))
                self.acceleration_label.setText(_translate("TrainModel_TestBench", "Acceleration (m/s²)"))
                self.passenger_label.setText(_translate("TrainModel_TestBench", "Passengers Onboard:"))
                self.length_label.setText(_translate("TrainModel_TestBench", "Length: 105.6 ft"))
                self.height_label.setText(_translate("TrainModel_TestBench", "Height: 11.2 ft"))
                self.train_info_label.setText(_translate("TrainModel_TestBench", "Train Information"))
                self.vacc_info_label.setText(_translate("TrainModel_TestBench", "Vacc = laplace(Vacc)"))
                self.force_label.setText(_translate("TrainModel_TestBench", "Force (N)"))
                self.next_station_label.setText(_translate("TrainModel_TestBench", "Next Station Information"))
                # self.sys_time_label.setText(_translate("TrainModel_TestBench", "13:24:55"))
                self.test_bench_btn.setText(_translate("TrainModel_TestBench", "Main UI"))
                self.calc_btn.setText(_translate("TrainModel_TestBench", "Calculate"))
                self.signal_fail_label.setText(_translate("TrainModel_TestBench", "Signal Pickup Failure"))
                self.external_lights_label.setText(_translate("TrainModel_TestBench", "External Lights"))
                self.external_lights_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.ebrake_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.signal_fail_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.engine_fail_label.setText(_translate("TrainModel_TestBench", "Train Engine Failure"))
                self.temperature_label.setText(_translate("TrainModel_TestBench", "Car Temp.: 72°F      SP:"))
                self.controls_label.setText(_translate("TrainModel_TestBench", "Controls"))
                self.failure_mode_label.setText(_translate("TrainModel_TestBench", "Failure Modes"))
                self.internal_lights_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.service_brake_on.setText(_translate("TrainModel_TestBench", "ON"))
                self.service_brake_off.setText(_translate("TrainModel_TestBench", "OFF"))
                self.service_brake_label.setText(_translate("TrainModel_TestBench", "Service Brake"))
                self.authority_label.setText(_translate("TrainModel_TestBench", "Authority"))
                self.train_line_label.setText(_translate("TrainModel_TestBench", "Train Line"))
                self.speed_limit_label.setText(_translate("TrainModel_TestBench", "Speed Limit"))
                self.underground_label.setText(_translate("TrainModel_TestBench", "Underground"))
                self.cmd_pwr_label.setText(_translate("TrainModel_TestBench", "Commanded Power"))
                self.grade_label.setText(_translate("TrainModel_TestBench", "Grade"))
                self.elevation_label.setText(_translate("TrainModel_TestBench", "Elevation"))
                self.vcmd_label.setText(_translate("TrainModel_TestBench", "Vcmd"))
                self.occupancy_label.setText(_translate("TrainModel_TestBench", "Occupancy"))


if __name__ == '__main__':
        import sys

        app = QApplication(sys.argv)
        TrainModel_TestBench = QtWidgets.QMainWindow()
        tm = TrainModel()
        ui = Ui_TrainModel_TestBench(tm)
        ui.setupUi(TrainModel_TestBench)
        TrainModel_TestBench.show()
        sys.exit(app.exec_())
