from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from train_controller.train_controller import TrainController
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
from api.train_model_train_controller_api import TrainModelTrainControllerAPI

class Ui_MainWindow(QMainWindow):
    def __init__(self, train_controller: TrainController) -> None:
        super().__init__()
        self.train_controller = train_controller
        self.setupUi()
        self.show()
    def setupUi(self):
        self.setObjectName("self")
        self.resize(656, 492)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(0, 0, 657, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setAutoFillBackground(False)
        self.title_label.setStyleSheet("background-color: rgb(255, 255, 0);\n"
"border: 3px solid black;")
        self.title_label.setObjectName("title_label")
        # self.test_bench_btn = QtWidgets.QPushButton(self.centralwidget)
        # self.test_bench_btn.setGeometry(QtCore.QRect(514, 10, 101, 27))
        # font = QtGui.QFont()
        # font.setPointSize(10)
        # font.setBold(True)
        # font.setWeight(75)
        # self.test_bench_btn.setFont(font)
        # self.test_bench_btn.setObjectName("test_bench_btn")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(18, 364, 401, 119))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(255, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.ebrake_fail_label = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_label.setGeometry(QtCore.QRect(428, 348+27, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_label.setFont(font)
        self.ebrake_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.ebrake_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ebrake_fail_label.setObjectName("ebrake_fail_label")
        self.brake_fail_label = QtWidgets.QLabel(self.centralwidget)
        self.brake_fail_label.setGeometry(QtCore.QRect(428, 400+27, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.brake_fail_label.setFont(font)
        self.brake_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.brake_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.brake_fail_label.setObjectName("brake_fail_label")
        self.engine_fail_off = QtWidgets.QLabel(self.centralwidget)
        self.engine_fail_off.setGeometry(QtCore.QRect(566, 378+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.engine_fail_off.setFont(font)
        self.engine_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.engine_fail_off.setAlignment(QtCore.Qt.AlignCenter)
        self.engine_fail_off.setObjectName("engine_fail_off")
        self.engine_fail_label = QtWidgets.QLabel(self.centralwidget)
        self.engine_fail_label.setGeometry(QtCore.QRect(428, 374+27, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.engine_fail_label.setFont(font)
        self.engine_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.engine_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.engine_fail_label.setObjectName("engine_fail_label")
        self.brake_fail_on = QtWidgets.QLabel(self.centralwidget)
        self.brake_fail_on.setEnabled(True)
        self.brake_fail_on.setGeometry(QtCore.QRect(596, 406+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.brake_fail_on.setFont(font)
        self.brake_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.brake_fail_on.setAlignment(QtCore.Qt.AlignCenter)
        self.brake_fail_on.setObjectName("brake_fail_on")
        self.failure_mode_label = QtWidgets.QLabel(self.centralwidget)
        self.failure_mode_label.setGeometry(QtCore.QRect(428, 322+27, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.failure_mode_label.setFont(font)
        self.failure_mode_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.failure_mode_label.setAlignment(QtCore.Qt.AlignCenter)
        self.failure_mode_label.setObjectName("failure_mode_label")
        self.brake_fail_off = QtWidgets.QLabel(self.centralwidget)
        self.brake_fail_off.setGeometry(QtCore.QRect(566, 406+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True) #comment
        font.setWeight(75)
        self.brake_fail_off.setFont(font)
        self.brake_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.brake_fail_off.setAlignment(QtCore.Qt.AlignCenter)
        self.brake_fail_off.setObjectName("brake_fail_off")
        self.signal_fail_label = QtWidgets.QLabel(self.centralwidget)
        self.signal_fail_label.setGeometry(QtCore.QRect(428, 426+27, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.signal_fail_label.setFont(font)
        self.signal_fail_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.signal_fail_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.signal_fail_label.setObjectName("signal_fail_label")
        self.ebrake_fail_on = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_on.setEnabled(True)
        self.ebrake_fail_on.setGeometry(QtCore.QRect(596, 352+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_on.setFont(font)
        self.ebrake_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.ebrake_fail_on.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_fail_on.setObjectName("ebrake_fail_on")
        self.signal_fail_off = QtWidgets.QLabel(self.centralwidget)
        self.signal_fail_off.setGeometry(QtCore.QRect(566, 430+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.signal_fail_off.setFont(font)
        self.signal_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.signal_fail_off.setAlignment(QtCore.Qt.AlignCenter)
        self.signal_fail_off.setObjectName("signal_fail_off")
        self.signal_fail_on = QtWidgets.QLabel(self.centralwidget)
        self.signal_fail_on.setEnabled(True)
        self.signal_fail_on.setGeometry(QtCore.QRect(596, 430+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.signal_fail_on.setFont(font)
        self.signal_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.signal_fail_on.setAlignment(QtCore.Qt.AlignCenter)
        self.signal_fail_on.setObjectName("signal_fail_on")
        self.engine_fail_on = QtWidgets.QLabel(self.centralwidget)
        self.engine_fail_on.setEnabled(True)
        self.engine_fail_on.setGeometry(QtCore.QRect(596, 378+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.engine_fail_on.setFont(font)
        self.engine_fail_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.engine_fail_on.setAlignment(QtCore.Qt.AlignCenter)
        self.engine_fail_on.setObjectName("engine_fail_on")
        self.ebrake_fail_off = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_off.setEnabled(True)
        self.ebrake_fail_off.setGeometry(QtCore.QRect(566, 352+27, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_off.setFont(font)
        self.ebrake_fail_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.ebrake_fail_off.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_fail_off.setObjectName("ebrake_fail_off")
        self.ebrake_on = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_on.setEnabled(True)
        self.ebrake_on.setGeometry(QtCore.QRect(596, 270, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_on.setFont(font)
        self.ebrake_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.ebrake_on.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_on.setObjectName("ebrake_on")
        self.right_door_closed = QtWidgets.QLabel(self.centralwidget)
        self.right_door_closed.setEnabled(True)
        self.right_door_closed.setGeometry(QtCore.QRect(512, 142, 53, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.right_door_closed.setFont(font)
        self.right_door_closed.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.right_door_closed.setAlignment(QtCore.Qt.AlignCenter)
        self.right_door_closed.setObjectName("right_door_closed")
        self.ebrake_label = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_label.setGeometry(QtCore.QRect(428, 266, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_label.setFont(font)
        self.ebrake_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.ebrake_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ebrake_label.setObjectName("ebrake_label")
        self.left_door_closed = QtWidgets.QLabel(self.centralwidget)
        self.left_door_closed.setEnabled(True)
        self.left_door_closed.setGeometry(QtCore.QRect(512, 168, 53, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.left_door_closed.setFont(font)
        self.left_door_closed.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.left_door_closed.setAlignment(QtCore.Qt.AlignCenter)
        self.left_door_closed.setObjectName("left_door_closed")
        self.external_lights_off = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_off.setEnabled(True)
        self.external_lights_off.setGeometry(QtCore.QRect(566, 244, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_off.setFont(font)
        self.external_lights_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.external_lights_off.setAlignment(QtCore.Qt.AlignCenter)
        self.external_lights_off.setObjectName("external_lights_off")
        self.internal_lights_off = QtWidgets.QLabel(self.centralwidget)
        self.internal_lights_off.setEnabled(True)
        self.internal_lights_off.setGeometry(QtCore.QRect(566, 218, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.internal_lights_off.setFont(font)
        self.internal_lights_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.internal_lights_off.setAlignment(QtCore.Qt.AlignCenter)
        self.internal_lights_off.setObjectName("internal_lights_off")
        self.right_door_label = QtWidgets.QLabel(self.centralwidget)
        self.right_door_label.setGeometry(QtCore.QRect(428, 138, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.right_door_label.setFont(font)
        self.right_door_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.right_door_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.right_door_label.setObjectName("right_door_label")
        self.external_lights_label = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label.setGeometry(QtCore.QRect(428, 240, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label.setFont(font)
        self.external_lights_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label.setObjectName("external_lights_label")
        self.external_lights_on = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_on.setEnabled(True)
        self.external_lights_on.setGeometry(QtCore.QRect(596, 244, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_on.setFont(font)
        self.external_lights_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.external_lights_on.setAlignment(QtCore.Qt.AlignCenter)
        self.external_lights_on.setObjectName("external_lights_on")
        self.ebrake_off = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_off.setEnabled(True)
        self.ebrake_off.setGeometry(QtCore.QRect(566, 270, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_off.setFont(font)
        self.ebrake_off.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.ebrake_off.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_off.setObjectName("ebrake_off")
        self.right_door_open = QtWidgets.QLabel(self.centralwidget)
        self.right_door_open.setEnabled(True)
        self.right_door_open.setGeometry(QtCore.QRect(570, 142, 49, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.right_door_open.setFont(font)
        self.right_door_open.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.right_door_open.setAlignment(QtCore.Qt.AlignCenter)
        self.right_door_open.setObjectName("right_door_open")
        self.left_door_label = QtWidgets.QLabel(self.centralwidget)
        self.left_door_label.setGeometry(QtCore.QRect(428, 164, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.left_door_label.setFont(font)
        self.left_door_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.left_door_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.left_door_label.setObjectName("left_door_label")
        self.internal_lights_label = QtWidgets.QLabel(self.centralwidget)
        self.internal_lights_label.setGeometry(QtCore.QRect(428, 214, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.internal_lights_label.setFont(font)
        self.internal_lights_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.internal_lights_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.internal_lights_label.setObjectName("internal_lights_label")
        self.internal_lights_on = QtWidgets.QLabel(self.centralwidget)
        self.internal_lights_on.setEnabled(True)
        self.internal_lights_on.setGeometry(QtCore.QRect(596, 218, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.internal_lights_on.setFont(font)
        self.internal_lights_on.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.internal_lights_on.setAlignment(QtCore.Qt.AlignCenter)
        self.internal_lights_on.setObjectName("internal_lights_on")
        self.left_door_open = QtWidgets.QLabel(self.centralwidget)
        self.left_door_open.setEnabled(True)
        self.left_door_open.setGeometry(QtCore.QRect(570, 168, 49, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.left_door_open.setFont(font)
        self.left_door_open.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.left_door_open.setAlignment(QtCore.Qt.AlignCenter)
        self.left_door_open.setObjectName("left_door_open")
        self.controls_label = QtWidgets.QLabel(self.centralwidget)
        self.controls_label.setGeometry(QtCore.QRect(428, 112, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.controls_label.setFont(font)
        self.controls_label.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.controls_label.setAlignment(QtCore.Qt.AlignCenter)
        self.controls_label.setObjectName("controls_label")
        self.ebrake_off_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_off_2.setEnabled(True)
        self.ebrake_off_2.setGeometry(QtCore.QRect(566, 296, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_off_2.setFont(font)
        self.ebrake_off_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.ebrake_off_2.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_off_2.setObjectName("ebrake_off_2")
        self.ebrake_on_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_on_2.setEnabled(True)
        self.ebrake_on_2.setGeometry(QtCore.QRect(596, 296, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_on_2.setFont(font)
        self.ebrake_on_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.ebrake_on_2.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_on_2.setObjectName("ebrake_on_2")
        self.ebrake_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_label_2.setGeometry(QtCore.QRect(428, 292, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_label_2.setFont(font)
        self.ebrake_label_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.ebrake_label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ebrake_label_2.setObjectName("ebrake_label_2")
        self.temperature = QtWidgets.QLabel(self.centralwidget)
        self.temperature.setGeometry(QtCore.QRect(428, 292+26, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.temperature.setFont(font)
        self.temperature.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "border: 1px solid black;\n"
                                          "")
        self.temperature.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.temperature.setObjectName("temperature")
        self.temperature_spnbx = QtWidgets.QSpinBox(self.centralwidget)
        self.temperature_spnbx.setGeometry(QtCore.QRect(568, 292+28, 52, 22))
        self.temperature_spnbx.setObjectName("temperature_spnbx")
        self.controls_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.controls_label_2.setGeometry(QtCore.QRect(16, 146, 185, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.controls_label_2.setFont(font)
        self.controls_label_2.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.controls_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.controls_label_2.setObjectName("controls_label_2")
        self.external_lights_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_3.setGeometry(QtCore.QRect(16, 172, 185, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_3.setFont(font)
        self.external_lights_label_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_3.setObjectName("external_lights_label_3")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setMaximum(100000.0)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(126, 174, 68, 24))
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.external_lights_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_4.setGeometry(QtCore.QRect(16, 202, 185, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_4.setFont(font)
        self.external_lights_label_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_4.setObjectName("external_lights_label_4")
        self.doubleSpinBox_3 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_3.setMaximum(100000.0)
        self.doubleSpinBox_3.setGeometry(QtCore.QRect(126, 204, 68, 24))
        self.doubleSpinBox_3.setObjectName("doubleSpinBox_3")
        self.external_lights_label_9 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_9.setGeometry(QtCore.QRect(210, 84, 209, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_9.setFont(font)
        self.external_lights_label_9.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_9.setObjectName("external_lights_label_9")
        self.controls_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.controls_label_3.setGeometry(QtCore.QRect(210, 58, 209, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.controls_label_3.setFont(font)
        self.controls_label_3.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.controls_label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.controls_label_3.setObjectName("controls_label_3")
        self.external_lights_label_10 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_10.setGeometry(QtCore.QRect(210, 112, 209, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_10.setFont(font)
        self.external_lights_label_10.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_10.setObjectName("external_lights_label_10")

        self.commanded_speed_spnbx = QtWidgets.QSpinBox(self.centralwidget)
        self.commanded_speed_spnbx.setGeometry(QtCore.QRect(350, 116, 62, 22))
        self.commanded_speed_spnbx.setObjectName("commanded_speed_spnbx")
        self.commanded_speed_spnbx.setMaximum(1000)
        self.external_lights_label_11 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_11.setGeometry(QtCore.QRect(210, 142, 209, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_11.setFont(font)
        self.external_lights_label_11.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_11.setObjectName("external_lights_label_11")
        self.external_lights_label_12 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_12.setGeometry(QtCore.QRect(210, 172, 209, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_12.setFont(font)
        self.external_lights_label_12.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_12.setObjectName("external_lights_label_12")
        self.external_lights_label_13 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_13.setGeometry(QtCore.QRect(210, 202, 209, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_13.setFont(font)
        self.external_lights_label_13.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_13.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.external_lights_label_13.setObjectName("external_lights_label_13")
        self.ebrake_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_label_3.setGeometry(QtCore.QRect(428, 190, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_label_3.setFont(font)
        self.ebrake_label_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.ebrake_label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ebrake_label_3.setObjectName("ebrake_label_3")
        self.ebrake_off_3 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_off_3.setEnabled(True)
        self.ebrake_off_3.setGeometry(QtCore.QRect(566, 194, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_off_3.setFont(font)
        self.ebrake_off_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.ebrake_off_3.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_off_3.setObjectName("ebrake_off_3")
        self.ebrake_on_3 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_on_3.setEnabled(True)
        self.ebrake_on_3.setGeometry(QtCore.QRect(598, 194, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_on_3.setFont(font)
        self.ebrake_on_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.ebrake_on_3.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_on_3.setObjectName("ebrake_on_3")
        self.pushButton_2 = QtWidgets.QLabel(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(18, 280, 401, 60)) #cut height in half
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.pushButton_2.setAlignment(QtCore.Qt.AlignCenter)
        self.pushButton_2.setObjectName("pushButton_2")
        self.slider = QtWidgets.QSlider(self.centralwidget)
        self.slider.setGeometry(QtCore.QRect(18, 250, 401, 22))
        self.slider.setOrientation(QtCore.Qt.Horizontal)
        self.slider.setObjectName("slider")
        self.slider.setMinimum(0)
        self.slider.setMaximum(100)
        self.slider.setValue(0)
        # #self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        # #self.checkBox.setGeometry(QtCore.QRect(630, 294, 87, 20))
        # #self.checkBox.setText("")
        # self.checkBox.setObjectName("checkBox")
        # self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_2.setGeometry(QtCore.QRect(630, 268, 87, 20))
        # self.checkBox_2.setText("")
        # self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(630, 242, 87, 20))
        self.checkBox_3.setText("")
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_4.setGeometry(QtCore.QRect(630, 216, 87, 20))
        self.checkBox_4.setText("")
        self.checkBox_4.setObjectName("checkBox_4")
        # self.checkBox_5 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_5.setGeometry(QtCore.QRect(630, 192, 87, 20))
        # self.checkBox_5.setText("")
        # self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_6 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_6.setGeometry(QtCore.QRect(630, 166, 87, 20))
        self.checkBox_6.setText("")
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_7 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_7.setGeometry(QtCore.QRect(630, 142, 87, 20))
        self.checkBox_7.setText("")
        self.checkBox_7.setObjectName("checkBox_7")
        # self.checkBox_8 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_8.setGeometry(QtCore.QRect(632, 350, 87, 20))
        # self.checkBox_8.setText("")
        # self.checkBox_8.setObjectName("checkBox_8")
        # self.checkBox_9 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_9.setGeometry(QtCore.QRect(632, 376, 87, 20))
        # self.checkBox_9.setText("")
        # self.checkBox_9.setObjectName("checkBox_9")
        # self.checkBox_10 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_10.setGeometry(QtCore.QRect(632, 402, 87, 20))
        # self.checkBox_10.setText("")
        # self.checkBox_10.setObjectName("checkBox_10")
        # self.checkBox_11 = QtWidgets.QCheckBox(self.centralwidget)
        # self.checkBox_11.setGeometry(QtCore.QRect(632, 428, 87, 20))
        # self.checkBox_11.setText("")
        # self.checkBox_11.setObjectName("checkBox_11")
        self.controls_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.controls_label_4.setGeometry(QtCore.QRect(16, 58, 187, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.controls_label_4.setFont(font)
        self.controls_label_4.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.controls_label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.controls_label_4.setObjectName("controls_label_4")
        self.external_lights_label_14 = QtWidgets.QLabel(self.centralwidget)
        self.external_lights_label_14.setGeometry(QtCore.QRect(16, 84, 187, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.external_lights_label_14.setFont(font)
        self.external_lights_label_14.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.external_lights_label_14.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
#         self.external_lights_label_14.setObjectName("external_lights_label_14")
#         self.external_lights_label_15 = QtWidgets.QLabel(self.centralwidget)
#         self.external_lights_label_15.setGeometry(QtCore.QRect(16, 114, 187, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         font.setBold(True)
#         font.setWeight(75)
#         self.external_lights_label_15.setFont(font)
#         self.external_lights_label_15.setStyleSheet("background-color: rgb(255, 255, 255);\n"
# "border: 1px solid black;\n"
# "")
#         self.external_lights_label_15.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
#         self.external_lights_label_15.setObjectName("external_lights_label_15")
        self.failure_mode_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.failure_mode_label_2.setGeometry(QtCore.QRect(428, 56, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.failure_mode_label_2.setFont(font)
        self.failure_mode_label_2.setStyleSheet("background-color: rgb(149, 188, 242);\n"
"border: 2px solid black;\n"
"")
        self.failure_mode_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.failure_mode_label_2.setObjectName("failure_mode_label_2")
        self.ebrake_fail_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_label_2.setGeometry(QtCore.QRect(428, 82, 198, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_label_2.setFont(font)
        self.ebrake_fail_label_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid black;\n"
"")
        self.ebrake_fail_label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ebrake_fail_label_2.setObjectName("ebrake_fail_label_2")
        self.checkBox_12 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_12.setGeometry(QtCore.QRect(632, 84, 87, 20))
        self.checkBox_12.setText("")
        self.checkBox_12.setObjectName("checkBox_12")
        self.ebrake_fail_on_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_on_2.setEnabled(True)
        self.ebrake_fail_on_2.setGeometry(QtCore.QRect(596, 86, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_on_2.setFont(font)
        self.ebrake_fail_on_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 0);")
        self.ebrake_fail_on_2.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_fail_on_2.setObjectName("ebrake_fail_on_2")
        self.ebrake_fail_off_2 = QtWidgets.QLabel(self.centralwidget)
        self.ebrake_fail_off_2.setEnabled(True)
        self.ebrake_fail_off_2.setGeometry(QtCore.QRect(566, 86, 25, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ebrake_fail_off_2.setFont(font)
        self.ebrake_fail_off_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(170, 0, 0);")
        self.ebrake_fail_off_2.setAlignment(QtCore.Qt.AlignCenter)
        self.ebrake_fail_off_2.setObjectName("ebrake_fail_off_2")
        self.ebrake_label_3.raise_()
        self.ebrake_on_3.raise_()
        self.ebrake_off_3.raise_()
        self.external_lights_label_13.raise_()
        self.ebrake_label_2.raise_()
        self.left_door_label.raise_()
        self.right_door_label.raise_()
        self.ebrake_label.raise_()
        self.external_lights_label.raise_()
        self.internal_lights_label.raise_()
        self.engine_fail_label.raise_()
        self.title_label.raise_()
        #self.test_bench_btn.raise_()
        self.pushButton.raise_()
        self.ebrake_fail_label.raise_()
        self.brake_fail_label.raise_()
        self.engine_fail_off.raise_()
        self.brake_fail_on.raise_()
        self.failure_mode_label.raise_()
        self.brake_fail_off.raise_()
        self.signal_fail_label.raise_()
        self.ebrake_fail_on.raise_()
        self.signal_fail_off.raise_()
        self.signal_fail_on.raise_()
        self.engine_fail_on.raise_()
        self.ebrake_fail_off.raise_()
        self.ebrake_on.raise_()
        self.right_door_closed.raise_()
        self.left_door_closed.raise_()
        self.external_lights_off.raise_()
        self.internal_lights_off.raise_()
        self.external_lights_on.raise_()
        self.ebrake_off.raise_()
        self.right_door_open.raise_()
        self.internal_lights_on.raise_()
        self.left_door_open.raise_()
        self.controls_label.raise_()
        self.ebrake_off_2.raise_()
        self.ebrake_on_2.raise_()
        self.controls_label_2.raise_()
        self.external_lights_label_3.raise_()
        self.doubleSpinBox_2.raise_()
        self.external_lights_label_4.raise_()
        self.doubleSpinBox_3.raise_()
        self.external_lights_label_9.raise_()
        self.controls_label_3.raise_()
        self.external_lights_label_10.raise_()
        self.external_lights_label_11.raise_()
        self.external_lights_label_12.raise_()
        self.pushButton_2.raise_()
        #self.checkBox.raise_()
        #self.checkBox_2.raise_()
        self.checkBox_3.raise_()
        self.checkBox_4.raise_()
        #self.checkBox_5.raise_()
        self.checkBox_6.raise_()
        self.checkBox_7.raise_()
        # self.checkBox_8.raise_()
        # self.checkBox_9.raise_()
        # self.checkBox_10.raise_()
        # self.checkBox_11.raise_()
        self.controls_label_4.raise_()
        self.external_lights_label_14.raise_()
        #self.external_lights_label_15.raise_()
        self.failure_mode_label_2.raise_()
        self.ebrake_fail_label_2.raise_()
        self.checkBox_12.raise_()
        self.ebrake_fail_on_2.raise_()
        self.ebrake_fail_off_2.raise_()
        self.commanded_speed_spnbx.raise_()
        self.temperature_spnbx.raise_()
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self._handler()
        #Auto Status
        self.checkBox_12.toggled.connect(
                lambda: self.train_controller.set_auto_status(self.checkBox_12.isChecked()))
        #Right Door
        self.checkBox_7.toggled.connect(
                lambda: self.train_controller.set_right_door_status(self.checkBox_7.isChecked()))
        #Left Door
        self.checkBox_6.toggled.connect(
                lambda: self.train_controller.set_left_door_status(self.checkBox_6.isChecked()))
        #Undergound Status
        # self.checkBox_5.toggled.connect(
        #         lambda: self.train_controller.set_underground_status(self.checkBox_5.isChecked()))
        #internal lights
        self.checkBox_4.toggled.connect(
                lambda: self.train_controller.set_internal_lights(self.checkBox_4.isChecked()))
        #external lights
        self.checkBox_3.toggled.connect(
                lambda: self.train_controller.set_external_lights(self.checkBox_3.isChecked()))
        #emergency brake
        # self.checkBox_2.toggled.connect(
        #         lambda: self.train_controller.set_emergency_brake_status(self.checkBox_2.isChecked()))
        # #service brake
        # self.checkBox.toggled.connect(
        #         lambda: self.train_controller.set_service_brake_status(self.checkBox.isChecked()))
        # #emergency brake failure
        # self.checkBox_8.toggled.connect(
        #         lambda: self.train_controller.set_emergency_brake_failure(self.checkBox_8.isChecked()))
        # #signal pickup failure
        # self.checkBox_11.toggled.connect(
        #         lambda: self.train_controller.set_signal_pickup_failure_status(self.checkBox_11.isChecked()))
        # #train engine failure
        # self.checkBox_9.toggled.connect(
        #         lambda: self.train_controller.set_engine_status(self.checkBox_9.isChecked()))
        # #service brake failure
        # self.checkBox_10.toggled.connect(
        #         lambda: self.train_controller.set_service_brake_failure(self.checkBox_10.isChecked()))
        #Speed Limit
        self.external_lights_label_9.setText(str("Speed Limit (mph): " + str(self.train_controller.get_maximum_velocity())))
        #Commanded Speed
        self.external_lights_label_10.setText(str("Commanded Speed (mph): " + str(self.train_controller.get_commanded_velocity())))
        #actual speed
        self.external_lights_label_11.setText(str("Actual Speed (mph): " + str(self.train_controller.get_current_velocity())))
        #commanded power
        self.external_lights_label_12.setText(str("Commanded Power (W):" + str(self.train_controller.get_commanded_power())))
        #authority
        self.external_lights_label_13.setText(str("Authority (ft): " + str(self.train_controller.get_authority())))
        #kp
        self.doubleSpinBox_2.setValue(float(self.train_controller.get_kp()))
        #ki
        self.doubleSpinBox_3.setValue(float(self.train_controller.get_ki()))
        #ek
        # self.doubleSpinBox.setValue(float(self.train_controller.get_ki()))
        # #uk
        # self.doubleSpinBox_4.setValue(float(self.train_controller.get_ki()))
        # temperature
        self.temperature_spnbx.setValue(72) # Default temperature

    def _handler(self):
        self.timer = QTimer()
        self.timer.setInterval(100)  # 100ms update rate
        self.timer.timeout.connect(self.update)
        self.timer.start()

    def toggle_buttons(self):
            if self.train_controller.get_auto_status():
                    self.slider.setEnabled(False)  # service brake
                    self.checkBox_7.setEnabled(False)  # right door
                    self.checkBox_6.setEnabled(False)  # left door
                    self.checkBox_3.setEnabled(False)  # external lights
                    self.checkBox_4.setEnabled(False)  # internal lights
                    self.pushButton.setEnabled(True)  # emergency brake
                    self.temperature_spnbx.setEnabled(False)  # temperature
                    self.commanded_speed_spnbx.setVisible(False)  # commanded speed
                    self.doubleSpinBox_3.setEnabled(False)  # ki
                    self.doubleSpinBox_2.setEnabled(False)  # kp
                    self.checkBox_12.setChecked(True)

            else:
                    self.slider.setEnabled(True)  # service brake
                    #self.checkBox_7.setEnabled(True)  # right door
                    #self.checkBox_6.setEnabled(True)  # left door

                    if self.train_controller.get_actual_velocity() == 0:
                        self.checkBox_7.setEnabled(True)  # right door
                        self.checkBox_6.setEnabled(True) # left door
                    else:
                        self.checkBox_7.setEnabled(False) #cannot open the door while moving
                        self.checkBox_6.setEnabled(False) #cannot open the door while moving

                    self.checkBox_3.setEnabled(True)  # external lights
                    self.checkBox_4.setEnabled(True)  # internal lights
                    self.pushButton.setEnabled(True)  # emergency brake
                    self.temperature_spnbx.setEnabled(True)  # temperature
                    self.commanded_speed_spnbx.setVisible(True)  # commanded speed
                    self.doubleSpinBox_3.setEnabled(True)  # ki
                    self.doubleSpinBox_2.setEnabled(True)  # kp
            if self.train_controller.get_ebrake_status():
                self.pushButton_2.setEnabled(False)  # service brake
                self.slider.setEnabled(False)  # service brake
    def update(self):
        _translate = QtCore.QCoreApplication.translate
        #auto status
        self.ebrake_fail_on_2.setVisible(bool(self.train_controller.get_auto_status()))
        self.ebrake_fail_off_2.setVisible(not bool(self.train_controller.get_auto_status()))
        #right door status
        self.right_door_open.setVisible(bool(self.train_controller.get_right_door_status()))
        self.right_door_closed.setVisible(not bool(self.train_controller.get_right_door_status()))
        #left door status
        self.left_door_open.setVisible(bool(self.train_controller.get_left_door_status()))
        self.left_door_closed.setVisible(not bool(self.train_controller.get_left_door_status()))
        #undergound status
        self.ebrake_on_3.setVisible(bool(self.train_controller.get_underground_status()))
        self.ebrake_off_3.setVisible(not bool(self.train_controller.get_underground_status()))
        #internal lights
        self.internal_lights_on.setVisible(bool(self.train_controller.get_internal_lights()))
        self.internal_lights_off.setVisible(not bool(self.train_controller.get_internal_lights()))
        #external lights
        self.external_lights_on.setVisible(bool(self.train_controller.get_external_lights()))
        self.external_lights_off.setVisible(not bool(self.train_controller.get_external_lights()))
        #emergency brake
        self.ebrake_on.setVisible(bool(self.train_controller.get_ebrake_status()))
        self.ebrake_off.setVisible(not bool(self.train_controller.get_ebrake_status()))
        #service brake
        self.ebrake_on_2.setVisible(bool(self.train_controller.get_service_brake_value()>0))
        self.ebrake_off_2.setVisible(not bool(self.train_controller.get_service_brake_value()>0))
        #ebrake failure
        self.ebrake_fail_on.setVisible(bool(self.train_controller.get_emergency_brake_failure_status()))
        self.ebrake_fail_off.setVisible(not bool(self.train_controller.get_emergency_brake_failure_status()))
        #service brake failure
        self.brake_fail_on.setVisible(bool(self.train_controller.get_service_brake_failure_status()))
        self.brake_fail_off.setVisible(not bool(self.train_controller.get_service_brake_failure_status()))
        #train engine failure status
        self.engine_fail_on.setVisible(bool(self.train_controller.get_engine_status()))
        self.engine_fail_off.setVisible(not bool(self.train_controller.get_engine_status()))
        #signal pickup failure
        self.signal_fail_on.setVisible(bool(self.train_controller.get_signal_pickup_failure()))
        self.signal_fail_on.setVisible(bool(self.train_controller.get_signal_pickup_failure()))
        self.signal_fail_off.setVisible(not bool(self.train_controller.get_signal_pickup_failure()))
        #speed limit
        self.external_lights_label_9.setText(str("Speed Limit (mph): " + str(round(self.train_controller.get_maximum_velocity(),3))))
        #commanded speed
        if self.train_controller.get_auto_status():
                self.external_lights_label_10.setText(str("Com. Speed (mph): " + str(round(self.train_controller.get_commanded_velocity(),3))))
        else:
                self.external_lights_label_10.setText(str("Com. Speed (mph): "))
        comspeed = self.commanded_speed_spnbx.value()
        self.train_controller.set_setpoint_speed(float(comspeed)/2.23694)

        self.external_lights_label_14.setText("Station: " + str(self.train_controller.get_beacon()))

        #kp
        kp = self.doubleSpinBox_2.value()
        self.train_controller.set_kp(kp)
        # self.doubleSpinBox_2.setValue(float(self.train_controller.get_kp()))
        #ki
        ki = self.doubleSpinBox_3.value()
        self.train_controller.set_ki(ki)
        # self.doubleSpinBox_3.setValue(float(self.train_controller.get_ki()))
        #actual speed
        self.external_lights_label_11.setText(str("Actual Speed (mph): " + str(round((self.train_controller.get_current_velocity()* 2.23694),3))))
        #commanded power
        self.external_lights_label_12.setText(str("Commanded Power (kW): " + str(round(self.train_controller.get_commanded_power()/1000,3))))
        #authority
        self.external_lights_label_13.setText(str("Authority (ft): " + str(round(self.train_controller.get_authority()*3.28084,3))))
        #actual velocity
        # self.actual_velocity_label.setText(str("Actual Velocity: " + str(self.train_controller.get_current_velocity())));
        #train line
        self.title_label.setText(str("Train Line: " + str(self.train_controller.get_train_line().upper())))
        #underground
        #self.underground_label.setText(str("Underground: " + str(self.train_controller.get_underground_status())))
        #ebrake clicked
        self.pushButton.clicked.connect(lambda: self.train_controller.set_emergency_brake_status(True))
        if self.train_controller.get_ebrake_status() == True:
                self.pushButton.clicked.connect(lambda: self.train_controller.set_emergency_brake_status(False))
        #service brake slider value
        slider_value = self.slider.value()
        self.train_controller.set_service_brake_value(slider_value/100)
        #service brake clicked
        # self.pushButton_2.clicked.connect(lambda: self.train_controller.set_service_brake_status(True))
        # if self.train_controller.get_service_brake_status()==True:
        #         self.pushButton_2.clicked.connect(lambda: self.train_controller.set_service_brake_status(False))
        # temperature
        self.temperature.setText(str("Car Temp: " + str(round(self.train_controller.get_temperature(),0)) + "°F"))
        temp = self.temperature_spnbx.value()
        self.train_controller.set_temperature_sp(float(temp))
        self.toggle_buttons()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Train Controller"))
        self.title_label.setText(_translate("MainWindow", " Train #NUM Line COLOR"))
        #self.test_bench_btn.setText(_translate("MainWindow", "Test Bench"))
        self.pushButton.setText(_translate("MainWindow", "Emergency Brake"))
        self.ebrake_fail_label.setText(_translate("MainWindow", "E-Brake Failure"))
        self.brake_fail_label.setText(_translate("MainWindow", "Service Brake Failure"))
        self.engine_fail_off.setText(_translate("MainWindow", "OFF"))
        self.engine_fail_label.setText(_translate("MainWindow", "Train Engine Failure"))
        self.brake_fail_on.setText(_translate("MainWindow", "ON"))
        self.failure_mode_label.setText(_translate("MainWindow", "Failure Modes"))
        self.brake_fail_off.setText(_translate("MainWindow", "OFF"))
        self.signal_fail_label.setText(_translate("MainWindow", "Signal Pickup Failure"))
        self.ebrake_fail_on.setText(_translate("MainWindow", "ON"))
        self.signal_fail_off.setText(_translate("MainWindow", "OFF"))
        self.signal_fail_on.setText(_translate("MainWindow", "ON"))
        self.engine_fail_on.setText(_translate("MainWindow", "ON"))
        self.ebrake_fail_off.setText(_translate("MainWindow", "OFF"))
        self.ebrake_on.setText(_translate("MainWindow", "ON"))
        self.right_door_closed.setText(_translate("MainWindow", "CLOSED"))
        self.ebrake_label.setText(_translate("MainWindow", "E-Brake"))
        self.left_door_closed.setText(_translate("MainWindow", "CLOSED"))
        self.external_lights_off.setText(_translate("MainWindow", "OFF"))
        self.internal_lights_off.setText(_translate("MainWindow", "OFF"))
        self.right_door_label.setText(_translate("MainWindow", "Right Door"))
        self.external_lights_label.setText(_translate("MainWindow", "External Lights"))
        self.external_lights_on.setText(_translate("MainWindow", "ON"))
        self.ebrake_off.setText(_translate("MainWindow", "OFF"))
        self.right_door_open.setText(_translate("MainWindow", "OPEN"))
        self.left_door_label.setText(_translate("MainWindow", "Left Door"))
        self.internal_lights_label.setText(_translate("MainWindow", "Internal Lights"))
        self.internal_lights_on.setText(_translate("MainWindow", "ON"))
        self.left_door_open.setText(_translate("MainWindow", "OPEN"))
        self.controls_label.setText(_translate("MainWindow", "Controls"))
        self.ebrake_off_2.setText(_translate("MainWindow", "OFF"))
        self.ebrake_on_2.setText(_translate("MainWindow", "ON"))
        self.ebrake_label_2.setText(_translate("MainWindow", "Service Brake"))
        self.controls_label_2.setText(_translate("MainWindow", "Power Controls"))
        self.external_lights_label_3.setText(_translate("MainWindow", "Kp"))
        self.external_lights_label_4.setText(_translate("MainWindow", "Ki"))
        self.external_lights_label_9.setText(_translate("MainWindow", "Speed Limit (mph)"))
        self.controls_label_3.setText(_translate("MainWindow", "Speed Information"))
        self.external_lights_label_10.setText(_translate("MainWindow", "Commanded Speed (mph)"))
        self.external_lights_label_11.setText(_translate("MainWindow", "Actual Speed (mph)"))
        self.external_lights_label_12.setText(_translate("MainWindow", "Commanded Power (W)"))
        self.external_lights_label_13.setText(_translate("MainWindow", "Authority (ft)"))
        self.ebrake_label_3.setText(_translate("MainWindow", "Underground"))
        self.ebrake_off_3.setText(_translate("MainWindow", "NO"))
        self.ebrake_on_3.setText(_translate("MainWindow", "YES"))
        self.pushButton_2.setText(_translate("MainWindow", "Service Brake"))
        self.controls_label_4.setText(_translate("MainWindow", "Station Information"))
        self.external_lights_label_14.setText(_translate("MainWindow", "Current Station:"))
        #self.external_lights_label_15.setText(_translate("MainWindow", "Station Status:"))
        self.failure_mode_label_2.setText(_translate("MainWindow", "Automatic Status"))
        self.ebrake_fail_label_2.setText(_translate("MainWindow", "Automatic Status "))
        self.ebrake_fail_on_2.setText(_translate("MainWindow", "ON"))
        self.ebrake_fail_off_2.setText(_translate("MainWindow", "OFF"))




if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    e = Ui_MainWindow(TrainController(TrainModelTrainControllerAPI()))
    # TrainModel_MainUI = QtWidgets.QMainWindow()
    # tm = TrainModel()
    # ui = Ui_self(tm)
    # ui.setupUi(TrainModel_MainUI)
    # TrainModel_MainUI.show()
    sys.exit(app.exec_())